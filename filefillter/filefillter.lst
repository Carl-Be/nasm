     1                                  ; Executeable: fillter 
     2                                  ; Description: This program will take input from a file and convert its contents to the 
     3                                  ; 	       oppropiate numric value that that the user inputted 
     4                                  ;  
     5                                  ;  Created: 8/11/2020
     6                                  ;  Updated: 8/11/2020
     7                                  ;  Author: Carl Bechie
     8                                  ;  Version: 1
     9                                  ;
    10                                  ; build cmommands:
    11                                  ; 	    ld -o fillter filefillter.o
    12                                  ; 	    nasm -f elf64 -g -F stabs filefillter.asm -l filefillter.lst
    13                                  ;  
    14                                  ;      run:
    15                                  ;           echo n | ./filefillter 
    16                                  ;
    17                                  
    18                                  ; named initialized data here 
    19                                  section .data
    20                                  	DIVISOR equ 2 ; making a constant for the divisor
    21                                  
    22                                  ; uninitalized data here aka buffers 
    23                                  section .bss
    24                                  	BUFFERLEN equ 120 ; the buffers length is 5 bytes 
    25                                  	ORDERBUFFLEN equ 400 ; enough room to make sure I dont collied 
    26                                  
    27 00000000 <res 00000078>          	buffer: resb BUFFERLEN ; the actual input buffer 
    28 00000078 <res 00000078>          	binbuffer: resb BUFFERLEN ; the conversion buffer to hold the calculations 
    29 000000F0 <res 00000190>          	orderdbuffer: resb ORDERBUFFLEN ; this buffer holds the bits in the correct order 
    30                                  
    31                                  ; program code goes here 
    32                                  section .text 
    33                                  
    34                                  	Global _start ; make _start a global label 
    35                                  
    36                                  ; This is were the kernel enters the program code 
    37                                  _start:
    38 00000000 90                      	nop ; keeps the debugger happy
    39                                  
    40                                  ; Reads the data in from the input file 
    41                                  read: 
    42 00000001 B803000000              	mov eax, 3 ; sys_read system call 
    43 00000006 BB00000000              	mov ebx, 0 ; file dicriptor Standard Input
    44 0000000B B9[00000000]            	mov ecx, buffer ; the buffer to take input from file 
    45 00000010 BA78000000              	mov edx, BUFFERLEN ; the length of the buffer 
    46                                  
    47 00000015 CD80                    	int 80h ; softerware interupt for the service dispatchor through the kernel service call gate 
    48                                  	
    49 00000017 BD00000000              	mov ebp, 0 ; place the buffer length into ebp for looping counter / buffer pointer  
    50 0000001C 31C0                    	xor eax,eax ; clear eax the accumulator  
    51 0000001E BB0A000000              	mov ebx, 10 ; this is the multiplyer 
    52 00000023 BF01000000              	mov edi, 1 ; checks the edge for 0a in the minus label
    53                                  
    54                                  ; Fillters the read buffer to make sure to it above or equal to 30h
    55                                  fillterAbove:
    56                                  
    57 00000028 67803C2929              	cmp byte [ecx + ebp], 29h ; compares 29h to byte 
    58                                  	; TODO jbe erro message ; Jump short if below or equal (CF = 1 or ZF = 1) 
    59 0000002D 7700                    	ja fillterBelow ; jump short if above (CF = 0 and ZF = 0)
    60                                  
    61                                  ; Fillters to make sure the hex value is equal to or under 39h
    62                                  fillterBelow:
    63 0000002F 67803C2940              	cmp byte [ecx + ebp], 40h ; compares 40h to byte  
    64 00000034 7200                    	jb minus ; Jump short if below (CF = 1)
    65                                  	;TODO jae add erro message label saying not a digit 
    66                                  
    67                                  ; Subtracts from the buffer index 
    68                                  minus: 
    69 00000036 67802C2930              	sub byte [ecx + ebp], 30h ; make the byte into a numric value and not ascii 
    70                                  	
    71 0000003B 67803C390A              	cmp byte [ecx + edi], 0ah ; cmp to the eol chr  
    72 00000040 7411                    	je addtoeax ; just add the next value into eax instead of times and add  
    73                                  
    74                                  ; Sums the decimal value in eax  
    75                                  sumDec:	
    76 00000042 31D2                    	xor edx, edx ; clear edx 
    77 00000044 670FB61429              	movzx edx, byte[ecx + ebp] ; add this memory addesses value into eax
    78 00000049 01D0                    	add eax, edx ; add the value into eax 
    79 0000004B F7E3                    	mul ebx ; times eax by 10 
    80                                  	
    81 0000004D FFC5                    	inc ebp 
    82 0000004F FFC7                    	inc edi
    83                                  
    84 00000051 EBD5                    	jmp fillterAbove
    85                                  
    86                                  ; add to the accumulator the value of the least signiicant digit 
    87                                  addtoeax:
    88 00000053 31D2                    	xor edx, edx ; clear edx 
    89                                  	
    90 00000055 670FB61429              	movzx edx, byte[ecx + ebp] ; add this memory addesses value into eax
    91 0000005A 01D0                    	add eax, edx ; add the value into eax 
    92                                  	
    93 0000005C 31DB                    	xor ebx, ebx ; clear ebx 
    94 0000005E 31ED                    	xor ebp, ebp ; clear ebp 
    95 00000060 B9[78000000]            	mov ecx, binbuffer
    96                                  
    97                                  ; Converts to binary 
    98                                  convert:
    99                                  
   100 00000065 BA00000000                      mov edx, 0 ; clear the dividend
   101 0000006A BB02000000                      mov ebx, DIVISOR ; copy two into ebx to be the divisor for the conversion
   102                                       
   103                                          ; before DIV executes eax = dividend | ebx = divisor 
   104 0000006F F7F3                            div ebx
   105                                          ; after DIV executes  eax = quotient | edx = remainder 
   106                                              
   107 00000071 80C230                          add dl, 30h ; add 30h to dl to carry out all the one bits form the not operation to get the proper hex value 
   108 00000074 67881429                        mov [ecx + ebp], dl; copy the remainder(ethier charater 0x30(zero) or 0x31(one) ASCII) into the binary buffer address incrementally by 1 add      ress each time
   109                                        
   110 00000078 FFC5                            inc ebp ; increment the (offset) buffer pointer by 1 so no buffer index gets overwriten           
   111                                        
   112 0000007A 83F800                          cmp eax, 0 ; if eax equals 0 binay conversion done else use recursion until done
   113 0000007D 7402                    	jz resetreg ; jump to conversion is done
   114 0000007F EBE4                    	jmp convert ; use recursion until the dividend equals zero
   115                                  
   116                                  ; This resets the registers 
   117                                  resetreg: 
   118 00000081 31C0                    	xor eax, eax
   119 00000083 31ED                    	xor ebp, ebp 
   120 00000085 31FF                    	xor edi, edi
   121 00000087 31F6                    	xor esi, esi
   122 00000089 31C9                    	xor ecx, ecx 
   123 0000008B 31DB                    	xor ebx, ebx
   124 0000008D 31D2                    	xor edx, edx 
   125                                  	
   126 0000008F BA[78000000]            	mov edx, binbuffer
   127 00000094 B9[F0000000]            	mov ecx, orderdbuffer
   128 00000099 BD78000000              	mov ebp, 120 ; this is going to be used to reverse the order this is for binbuffer count downwards 
   129 0000009E BF00000000              	mov edi, 0 ; this is for the orderdbuffer index
   130                                  
   131                                  ; This reverse the buffer to the correct order 
   132                                  reverse: 
   133 000000A3 FFCD                    	dec ebp ; decrenment ebp by 1 
   134                                  
   135 000000A5 678A042A                	mov al, byte [edx + ebp] ; starting at the least signicant byte place it into the correct order buffer 
   136 000000A9 67880439                	mov [ecx + edi], al ; starting at the most signicant byte start placing the correct order into the buffer 
   137                                  
   138 000000AD FFC7                    	inc edi ; increment esi by 1 	
   139                                  
   140 000000AF 83FD00                  	cmp ebp, 0 ; once zero jmp to writeBuffer
   141 000000B2 75EF                    	jnz reverse ; jmp if not zero back to reverse until zero 
   142                                  
   143                                  ; Displays the write buffer to the terminal 
   144                                  writeBuffer: 
   145                                  	
   146 000000B4 67C6815E0100000A        	mov byte [ecx + 350], 0ah; place the end of line charater bake into the buffer 
   147                                  
   148 000000BC B804000000              	mov eax, 4 ; System call sys_write
   149 000000C1 BB01000000              	mov ebx, 1 ; File dicriptor for standard output 
   150 000000C6 BA90010000              	mov edx, ORDERBUFFLEN; place the buffers length into edx for output 
   151                                  
   152 000000CB CD80                    	int 80h ; softerware interupt for the service dispatchor through the kernel service call gate 
   153                                  
   154                                  ; Exits the program normally 
   155                                  exitProgram: 
   156 000000CD B801000000              	mov eax, 1 ; Place the sys_exit interput vector system call into eax 
   157 000000D2 BB00000000              	mov ebx, 0 ; Place the normal status exit code into ebx
   158                                  	
   159 000000D7 CD80                    	int 80h ; Call the kernel service call gate softerware interupt into the service dispatchor intuput vetor address in the interupt vetor tabel  
   160                                  
