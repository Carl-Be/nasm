     1                                  ; Test asm File to play with
     2                                  ; 
     3                                  ; Author: Carl Bechie
     4                                  ; Created: 8/03/2020
     5                                  ; Updated: 8/03/2020
     6                                  ;
     7                                  ; Will be inputed into sandbox.asm for building 
     8                                  
     9                                  section .data ; where initialized data goes 
    10                                  
    11 00000000 48656C6C6F20746869-     	MyString: db "Hello this is my first written program from memory",10,'"This" will be a multiline string! :)',10 ; String labled MyString
    11 00000009 73206973206D792066-
    11 00000012 697273742077726974-
    11 0000001B 74656E2070726F6772-
    11 00000024 616D2066726F6D206D-
    11 0000002D 656D6F72790A225468-
    11 00000036 6973222077696C6C20-
    11 0000003F 62652061206D756C74-
    11 00000048 696C696E6520737472-
    11 00000051 696E6721203A290A   
    12                                  	StringLen: equ $-MyString ; Calculate string lengeth during assembly-time calculations 
    13                                  
    14                                  section .bss ; where unitialized data goes 
    15                                  
    16                                  
    17                                  section .text ; program code goes beneath here 
    18                                  
    19                                  	Global _start 	   		; Kerenel needs this global label to know where to start program execution 
    20                                  		
    21                                  _start: 	   		; start program code execution
    22                                  
    23 00000000 90                      	nop  			; gdb needs this to be happy 
    24                                  	
    25 00000001 B804000000              	mov eax, 4 		; Put sys_call write into eax
    26 00000006 BB01000000              	mov ebx, 1 		; output file discriptor arg
    27 0000000B B9[00000000]            	mov ecx, MyString 	; buff argument of sys_call
    28 00000010 BA59000000              	mov edx, StringLen ; String Size
    29                                  		
    30 00000015 CD80                    	int 80H 		; Call System Interupt to write string to screen
    31                                  
    32 00000017 B801000000              	mov eax, 1 		; Put sys_call exit into eax
    33 0000001C BB00000000              	mov ebx, 0 		; exit status code 0 - normal exit 
    34                                  
    35 00000021 CD80                    	int 80H 		; Call System Interupt to exit program code  
    36                                  
    37 00000023 90                      	nop 			; gdb needs this to be happy 
